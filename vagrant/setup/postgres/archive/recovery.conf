# -------------------------------
# PostgreSQL recovery config file
# -------------------------------
#
# Edit this file to provide the parameters that PostgreSQL needs to
# perform an archive recovery of a database, or to act as a replication
# standby.
#
# If "recovery.conf" is present in the PostgreSQL data directory, it is
# read on postmaster startup.  After successful recovery, it is renamed
# to "recovery.done" to ensure that we do not accidentally re-enter
# archive recovery or standby mode.
#
# This file consists of lines of the form:
#
#   name = value
#
# Comments are introduced with '#'.
#
# The complete list of option names and allowed values can be found
# in the PostgreSQL documentation.
#

# recovery_target_timeline
# Set to 'latest' to follow the master if it switches timeline
# requires version 9.3 or WAL file archiving to be effective

recovery_target_timeline = 'latest'

#---------------------------------------------------
# WAL File recovery parameters
#---------------------------------------------------

# set the below if you are also doing replication via WAL file
# archiving, with or without streaming

# restore command
# specifies the shell command that is executed to copy log files
# back from archival storage.  The command string may contain %f,
# which is replaced by the name of the desired log file, and %p,
# which is replaced by the absolute path to copy the log file to.
#
# This parameter is *required* for an archive recovery, but optional
# for streaming replication.
#
# It is important that the command return nonzero exit status on failure.
# The command *will* be asked for log files that are not present in the
# archive; it must return nonzero when so asked.
#
# NOTE that the basename of %p will be different from %f; do not
# expect them to be interchangeable.

restore_command = 'cp /var/lib/postgresql/wal_archive/%f %p'

# pause on recovery target
# this command determines whether the database should halt recovery
# and wait for promotion when done recovering
# it defaults to on, but should really only be used if 
# hot_standby is on, because otherwise you can't check

pause_at_recovery_target = on

# recovery_target_time
# use this to roll back to a time before you dropped the production
# database

# recovery_target_time = '2015-11-05 20:45:15'
